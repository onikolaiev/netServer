<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AccountChallenge" xml:space="preserve">
    <value>Client attempting to challenge auth for account: {0}</value>
  </data>
  <data name="AccountCreated" xml:space="preserve">
    <value>Successfully created account "{0}" (Role: {1}).</value>
  </data>
  <data name="AccountCreationFailed" xml:space="preserve">
    <value>Failed to create account "{0}".</value>
  </data>
  <data name="AccountNotFound" xml:space="preserve">
    <value>Client attempted to log into non-existant account: {0}</value>
  </data>
  <data name="AttemptedRequestForUnknownAccount" xml:space="preserve">
    <value>A request for non-existant account '{0}' was made from {1} (Last Login from: {2})</value>
  </data>
  <data name="AuthPacketParsed" xml:space="preserve">
    <value>Packet '{0}' parsed successfully!</value>
  </data>
  <data name="AuthServiceAlreadyListening" xml:space="preserve">
    <value>IPC service address already bound to; make sure you aren't already running the Authentication server!</value>
  </data>
  <data name="AutocreatingAccount" xml:space="preserve">
    <value>Auto-creating account: {0}</value>
  </data>
  <data name="CannotRetrieveAuthenticationInfo" xml:space="preserve">
    <value>Could not retrieve Authentication info for account '{0}'!</value>
  </data>
  <data name="IPCServiceFailed" xml:space="preserve">
    <value>IPC Service failed - Restarting in '{0}' seconds...</value>
  </data>
  <data name="IPCServiceStarted" xml:space="preserve">
    <value>IPC Service started successfully - Listening on {0}</value>
  </data>
  <data name="IPCServiceShutdown" xml:space="preserve">
    <value>IPC Service stopped successfully.</value>
  </data>
  <data name="ClientConnected" xml:space="preserve">
    <value>Client connected to the server. Address: {0}</value>
  </data>
  <data name="ClientDisconnected" xml:space="preserve">
    <value>Client disconnected from the server. Address: {0}</value>
  </data>
  <data name="ClientNull" xml:space="preserve">
    <value>Client cannot be null!</value>
  </data>
  <data name="DatabaseFailure" xml:space="preserve">
    <value>There was a fatal database error, server not started</value>
  </data>
  <data name="HandlerAlreadyRegistered" xml:space="preserve">
    <value>The PacketHandler for Packet {0} '{1}' has been overridden with '{2}'!</value>
  </data>
  <data name="InvalidAuthPacket" xml:space="preserve">
    <value>Invalid authentication packet!</value>
  </data>
  <data name="InvalidClientProof" xml:space="preserve">
    <value>Client-supplied proof of Account {0} did not match server-generated proof.</value>
  </data>
  <data name="InvalidEmailAddress" xml:space="preserve">
    <value>Invalid email address: {0}</value>
  </data>
  <data name="InvalidHandlerMethodSignature" xml:space="preserve">
    <value>Cannot create packet handler delegate from method '{0}': invalid method signature!</value>
  </data>
  <data name="PacketHandleException" xml:space="preserve">
    <value>An exception occured while trying to handle packet! Packet ID: '{0}'</value>
  </data>
  <data name="PacketParseFailed" xml:space="preserve">
    <value>Failed to parse packet properly! Given opcode: {0:X4}</value>
  </data>
  <data name="RegisteredAllHandlers" xml:space="preserve">
    <value>Registered all packet handlers!</value>
  </data>
  <data name="RegisteredHandler" xml:space="preserve">
    <value>Registered handler for '{0}' for {1}</value>
  </data>
  <data name="StartInitException" xml:space="preserve">
    <value>Exception occured when starting/initializing: {0}</value>
  </data>
  <data name="StopCleanup" xml:space="preserve">
    <value>Stopping/cleaning up: {0}</value>
  </data>
  <data name="StopCleanupException" xml:space="preserve">
    <value>Exception occured when stopping/cleaning up: {0}</value>
  </data>
  <data name="UDPNotImplemented" xml:space="preserve">
    <value>UDP messages are not part of the protocol</value>
  </data>
  <data name="UnhandledPacket" xml:space="preserve">
    <value>Unhandled packet {0} ({1}), Size: {2} bytes</value>
  </data>
  <data name="PrivilegeConfigChanged" xml:space="preserve">
    <value>Privilege configuration changed; reloading!</value>
  </data>
  <data name="CachingAccounts" xml:space="preserve">
    <value>Caching Accounts...</value>
  </data>
  <data name="AccountsCached" xml:space="preserve">
    <value>(Re-)Cached {0} Accounts.</value>
  </data>
  <data name="ChallengeFailed" xml:space="preserve">
    <value>Account Challenge failed</value>
  </data>
  <data name="RealmRegistered" xml:space="preserve">
    <value>New Realm registered: {0}</value>
  </data>
  <data name="RealmUpdated" xml:space="preserve">
    <value>Realm update from {0}</value>
  </data>
  <data name="RealmUnregistered" xml:space="preserve">
    <value>Realm unregistered: {0}</value>
  </data>
  <data name="RealmDisconnected" xml:space="preserve">
    <value>Realm disconnected: {0}</value>
  </data>
  <data name="UnknownIPCLogin" xml:space="preserve">
    <value>Unknown username or password given for IPC authentication! Username: '{0}'  Password: '{1}' </value>
  </data>
</root>